---
import { getCollection } from "astro:content";

let allItems = await getCollection("equipment");

allItems.sort((a, b) => {
    const categoryCompare = a.data.category.localeCompare(b.data.category);
    if (categoryCompare !== 0) {
        return categoryCompare;
    }

    const priorityA = a.data.priority ?? 0;
    const priorityB = b.data.priority ?? 0;
    if (priorityA !== priorityB) {
        return priorityB - priorityA;
    }
    return a.data.title.localeCompare(b.data.title);
});


const groupedItems: Record<string, typeof allItems> = {};
for (const item of allItems) {
    if (!groupedItems[item.data.category]) {
        groupedItems[item.data.category] = [];
    }
    groupedItems[item.data.category].push(item);
}

let base = import.meta.env.BASE_URL;

if (!base.endsWith('/')) {
    base += '/';
}
---

<h2>My equipment</h2>
{
    Object.entries(groupedItems).map(([category, items]) => (
        <h2 class="marker">{category} <small>(Total: {items.reduce((sum, p) => sum + (p.data.count || 0), 0)})</small></h2>
        <div class="grid">
            {items.map((p) => (
                <div class="device">
                    <h3><a href={`${base}equipment/${p.data.category.replaceAll(" ", "-").replaceAll("'", "")}/${p.data.title.replaceAll(" ", "-").replaceAll("+", "plus")}`.toLowerCase()}>{p.data.title}</a> {p.data.count !== 1 && <small>({p.data.count}x)</small>}</h3>
                    <p>{p.data.description}</p>
                </div>
            ))}
        </div>
    ))
}

<style>
    .grid {
        margin-top: 10px;
        padding: 10px;
        box-sizing: border-box;
        display: grid;
        grid-template-columns: 50% 50%;
        gap: 10px;
    }

    @media only screen and (max-width: 800px) {
        .grid {
            grid-template-columns: 100%;
        }
    }

    .marker {
        border-left: 5px solid #7e4895;
        padding: 5px;
    }
</style>
